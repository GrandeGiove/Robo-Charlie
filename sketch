#include <Servo.h>

//Pin di input del ponte H
int pinIngresso1 = 5							 //collegato al pin 3  dell'L293D
int pinIngresso2 = 4							 //collegato al pin 6  dell'L293D
int pinIngresso3 = 7; 							 //collegato al pin 11 dell'L293D
int pinIngresso4 = 6							 //collegato al pin 14 dell'L293D

int Pulsante = 9;
int statoPulsante = 0;

// Segnalatori LED
int pinVerde =  10;
int pinGiallo = 11;
int pinRosso =  12;

//Misuratore di distanza con sensore ad ultrasuoni SRF05
unsigned long durata;           				 //durata dell'impulso
unsigned int distanza;          				 //distanza dell'oggetto
int minimaDistanza = 10;  						 //distanza di soglia a cui il robot deve cambiare direzione
int pin_segnale = 8;      						 //pin Arduino a cui Ã¨ collegato il sensore SRF05
int baud_rate = 9600;
unsigned int misura_distanza()
{
	pinMode(pin_segnale, OUTPUT);

	digitalWrite(pin_segnale, LOW);        		// viene posto a LOW pin, per 2 microsecondi
												// prima di inviare un breve impulso di trigger
	delayMicroseconds(2);
	digitalWrite(pin_segnale, HIGH);            // invia un impulso di trigger
	delayMicroseconds(10);               		// di 10 microsecondi
	digitalWrite(pin_segnale, LOW);      		// pone il pin al LOW in attesa che l'impulso torni indietro
	pinMode(pin_segnale, INPUT);
	unsigned long durata = pulseIn(pin_segnale, HIGH); // legge l'eco dell'impulso emesso in microsecondi
	delay(50);
	unsigned int distanza = durata / 58;               // divide la durata per 58 per ottenere la distanza in cm
	Serial.print("distanza: ");
	Serial.print(distanza);   					// stampa sul Serial Monitor il valore della distanza
	Serial.print("cm: ");
	Serial.println();
	return distanza;
}

void setup()
{
	Serial.begin(baud_rate);
	pinMode(pinRosso,  OUTPUT);
	pinMode(pinGiallo, OUTPUT);
	pinMode(pinVerde,  OUTPUT);


	pinMode(pinIngresso1, OUTPUT);
	pinMode(pinIngresso2, OUTPUT);
	pinMode(pinIngresso3, OUTPUT);
	pinMode(pinIngresso4, OUTPUT);
}

void loop()

{
	if(misura_distanza() > minimaDistanza)
	{
		delay(1000);
		avanza();
		digitalWrite(pinRosso, HIGH);
		digitalWrite(pinVerde, HIGH);
		digitalWrite(pinGiallo, LOW);
	}

	else if(misura_distanza() < minimaDistanza)
	{
		delay(1000);
		sinistra();
		digitalWrite(pinRosso, HIGH);
		digitalWrite(pinVerde, HIGH);
		digitalWrite(pinGiallo, HIGH);
	}
	/*  else if (distanza<5)
	  {

	     sinistra();
	  digitalWrite(pinRosso, HIGH);
	  digitalWrite(pinVerde, HIGH);
	  digitalWrite(pinGiallo, HIGH);
	  }
	 */
}


//Funzioni di Movimento

void avanza()
{
	Serial.println("AVANTI");
	digitalWrite(pinIngresso1, LOW);
	digitalWrite(pinIngresso2, HIGH);
	digitalWrite(pinIngresso3, LOW);
	digitalWrite(pinIngresso4, HIGH);
}

void indietro()
{
	Serial.println("INDIETRO");
	digitalWrite(pinIngresso1, HIGH);
	digitalWrite(pinIngresso2, LOW);
	digitalWrite(pinIngresso3, HIGH);
	digitalWrite(pinIngresso4, LOW);
}

void Stop()
{
	digitalWrite(pinIngresso1, LOW);
	digitalWrite(pinIngresso2, LOW);
	digitalWrite(pinIngresso3, LOW);
	digitalWrite(pinIngresso4, LOW);
}

void sinistra()
{
	Serial.println("SINISTRA");
	digitalWrite(pinIngresso1, LOW);
	digitalWrite(pinIngresso2, LOW);
	digitalWrite(pinIngresso3, LOW);
	digitalWrite(pinIngresso4, HIGH);
}
